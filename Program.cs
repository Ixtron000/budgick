using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using System.IO;
using OfficeOpenXml;
using Telegram.Bot.Exceptions;

class Program
{
    private static readonly string Token = "7197293618:AAEdjKHiF2mFo5MaM7bHLK9vuumdEsWisgQ";
    private static readonly TelegramBotClient BotClient = new TelegramBotClient(Token);
    private static readonly CancellationTokenSource CancellationToken = new CancellationTokenSource();
    private static readonly HttpClient HttpClient = new HttpClient(); 

    static async Task Main(string[] args)
    {
        BotClient.StartReceiving(UpdateHandler, ErrorHandler, cancellationToken: CancellationToken.Token);

        Console.WriteLine("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
        Console.ReadLine();

        CancellationToken.Cancel();
    }

    private static async Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken token)
    {
        Console.WriteLine($"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exception.Message}");
    }
    // /start
    private static async Task Start(ITelegramBotClient botClient, long chatId)
    {
        string welcomeMessage = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üéâ\n\n" +
            "–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ. –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. üöÄ\n\n" +
            "–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏. üí™\n\n" +
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å. ü§ù\n\n" +
            "–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞! üåü";

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("Telegram üì±", "telegram"),
                InlineKeyboardButton.WithCallbackData("VK üîµ", "vk")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("TikTok üéµ", "tiktok"),
                InlineKeyboardButton.WithCallbackData("YouTube ‚ñ∂Ô∏è", "youtube")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("Instagram üì∏", "instagram"),
                InlineKeyboardButton.WithCallbackData("Rutube üî∑", "rutube")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–î–∑–µ–Ω üíö", "dzen"),
                InlineKeyboardButton.WithCallbackData("shedevrum ‚ú®", "shedevrum")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–ú—É–∑—ã–∫–∞ üì£", "music"),
            }
        });


        await botClient.SendTextMessageAsync(chatId, welcomeMessage, replyMarkup: inlineKeyboard);
    }
    // –ø–æ–ª—É–≤–µ–Ω–∏–µ –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    private static async Task SendFilteredCategoriesAsync(long chatId, string messageText, string keyword, ITelegramBotClient botClient)
    {
        string url = "https://soc-rocket.ru/api/v2/?action=services&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP";
        var secondWordTranslations = new Dictionary<string, (string translation, string emoji)>
        {
            { "followers", ("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ üìà", "followers") },
            { "views", ("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã üëÅÔ∏è", "views") },
            { "reaction", ("–†–µ–∞–∫—Ü–∏—è ‚ù§Ô∏è", "reaction") },
            { "statistic", ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", "statistic") },
            { "auto", ("–ê–≤—Ç–æ üöÄ", "auto") },
            { "premium", ("–ü—Ä–µ–º–∏—É–º üåü", "premium") },
            { "other", ("–î—Ä—É–≥–æ–µ üîç", "other") },
            { "friends", ("–î—Ä—É–∑—å—è üë§", "friends") },
            { "comments", ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚úâÔ∏è", "comments") },
        };

        try
        {
            HttpResponseMessage response = await HttpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            JArray jsonArray = JArray.Parse(responseBody);
            var filteredCategories = jsonArray
                .Select(service => service["category"].ToString())
                .Where(category => category.StartsWith(keyword, StringComparison.OrdinalIgnoreCase))
                .Distinct();
            var inlineKeyboardButtons = filteredCategories
                .Select(category =>
                {
                    var words = category.Split(' ');
                    if (words.Length > 1 && secondWordTranslations.TryGetValue(words[1].ToLower(), out var translation))
                    {
                        return InlineKeyboardButton.WithCallbackData($"{words[0]} {translation.translation}", category);
                    }
                    return InlineKeyboardButton.WithCallbackData(category, category);
                })
                .Select(button => new[] { button })
                .ToList();
            inlineKeyboardButtons.Add(new[] { InlineKeyboardButton.WithCallbackData("<< –ì–ª–∞–≤–Ω–∞—è", "main") });
            var inlineKeyboard = new InlineKeyboardMarkup(inlineKeyboardButtons);
            await botClient.SendTextMessageAsync(chatId, messageText, replyMarkup: inlineKeyboard);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + e.Message);
            await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. üòî");
        }
        catch (Newtonsoft.Json.JsonReaderException e)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + e.Message);
            await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞. üòî");
        }
    }
    //–±–∞–ª–∞–Ω—Å
    private static async Task GetUserBalance(long chatId, ITelegramBotClient botClient, string name, long id )
    {
        string filePath = "users.xlsx";
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        if (!System.IO.File.Exists(filePath))
        {
            Console.WriteLine("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        using (var package = new ExcelPackage(new FileInfo(filePath)))
        {
            var worksheet = package.Workbook.Worksheets["Users"];
            var rowCount = worksheet.Dimension?.Rows;

            if (rowCount.HasValue)
            {
                bool userFound = false;

                for (int row = 2; row <= rowCount.Value; row++)
                {
                    if (worksheet.Cells[row, 1].Value.ToString() == chatId.ToString())
                    {
                        var balance = worksheet.Cells[row, 3].Value;
                        var inlineKeyboard = new InlineKeyboardMarkup(new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithUrl("–ù–∞–ø–∏—Å–∞—Ç—å","https://t.me/tekna_one")
                            },
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("üîô –ì–ª–∞–≤–Ω–∞—è","main")
                            }
                        });
                        await botClient.SendTextMessageAsync(
                            chatId,
                            $"üñê–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! \n –í–∞—à ID:  {id} \n‚åõ–í—Ä–µ–º—è (–ú–°–ö):  {TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time"))}. \nüíö–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n\n üß°–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!",
                            replyMarkup: inlineKeyboard
                        );
                        userFound = true;
                        break;
                    }
                }
                if (!userFound)
                {
                    await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. üòî");
                }
            }
            else
            {
                Console.WriteLine("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
            }
        }
    }
    //–ø–æ–∏—Å–∫ –∞–π—Ç–µ–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private static async Task SendFilteredItemsAsync(string category, long chatId, ITelegramBotClient botClient)
    {
        try
        {
            HttpResponseMessage response = await HttpClient.GetAsync("https://soc-rocket.ru/api/v2/?action=services&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP");
            response.EnsureSuccessStatusCode();

            string responseBody = await response.Content.ReadAsStringAsync();
            JArray jsonArray = JArray.Parse(responseBody);

            string firstWord = category.Split(' ').FirstOrDefault();

            var filteredItems = jsonArray
                .Where(service => service["category"]?.ToString() == category)
                .Select(service => new
                {
                    Name = service["name"]?.ToString(),
                    Service = service["service"]?.ToString()
                })
                .Where(item => !string.IsNullOrWhiteSpace(item.Name) && !string.IsNullOrWhiteSpace(item.Service))
                .ToList();

            var buttons = filteredItems
                .Select(item => InlineKeyboardButton.WithCallbackData(item.Name, item.Service))
                .ToList();

            string modifiedFirstWord = char.ToLower(firstWord[0]) + firstWord.Substring(1);
            buttons.Add(InlineKeyboardButton.WithCallbackData($"üîô –ù–∞–∑–∞–¥", $"{modifiedFirstWord}"));


            var keyboardMarkup = new InlineKeyboardMarkup(
                buttons
                    .Select(button => new[] { button }) 
                    .ToArray()
            );

            if (filteredItems.Any())
            {
                await botClient.SendTextMessageAsync(chatId, $"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'. üéØ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üåü –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ! üìã –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üí¨üîß", replyMarkup: keyboardMarkup);
            }
            else
            {
                await botClient.SendTextMessageAsync(chatId, $"üö´ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.");
            }

        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + e.Message);
            await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥. üòî");
        }
        catch (Newtonsoft.Json.JsonReaderException e)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + e.Message);
            await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞. üòî");
        }
    }
    // –ø–æ–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    private static async Task SendServiceDetailsAsync(int serviceId, long chatId, ITelegramBotClient botClient)
    {
        try
        {
            HttpResponseMessage response = await HttpClient.GetAsync("https://soc-rocket.ru/api/v2/?action=services&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP");
            response.EnsureSuccessStatusCode();

            string responseBody = await response.Content.ReadAsStringAsync();
            JArray jsonArray = JArray.Parse(responseBody);
            var service = jsonArray.FirstOrDefault(s => s["service"]?.ToString() == serviceId.ToString());

            if (service != null)
            {
                decimal rate = service["rate"].Value<decimal>();
                int price = (int)rate;
                string serviceDetails = $@"
üî∏–¢–æ–≤–∞—Ä ‚Ññ{serviceId} üî∏

üü• –ù–∞–∑–≤–∞–Ω–∏–µ: {service["name"]}
üü¶ –¶–µ–Ω–∞ –∑–∞ —Ç—ã—Å—è—á—É: {price * 2} ‚ÇΩ
üüß –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {service["min"]}
üü© –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {service["max"]}
üü® –î–æ–∫—Ä—É—Ç–∫–∞: {service["refill"]}
‚ùå –û—Ç–º–µ–Ω–∞: {service["cancel"]}

üí∂–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üõí:
/buy {serviceId} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–∫–∞";
                var inlineKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", service["category"].ToString())
                    }
                });
                await botClient.SendTextMessageAsync(chatId, serviceDetails, replyMarkup: inlineKeyboard);
            }
            else
            {
                await botClient.SendTextMessageAsync(chatId, "‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + e.Message);
            await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —É—Å–ª—É–≥–∏. üòî");
        }
        catch (Newtonsoft.Json.JsonReaderException e)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + e.Message);
            await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞. üòî");
        }
    }
    // –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    static async Task CancelOrder(ITelegramBotClient botClient, string orderId, long chatId)
    {
        string requestUri = $"https://soc-rocket.ru/api/v2/?action=cancel&order={orderId}&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP";

        try
        {
            HttpResponseMessage response = await HttpClient.GetAsync(requestUri);
            response.EnsureSuccessStatusCode();

            string responseBody = await response.Content.ReadAsStringAsync();
            JObject jsonResponse = JObject.Parse(responseBody);

            string cancelStatus = (string)jsonResponse["cancel"];
            var inlineKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "main")
                    }
                });
            if (cancelStatus == "ok")
            {
                await botClient.SendTextMessageAsync(chatId: chatId, $"üíö–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{orderId} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!", replyMarkup: inlineKeyboard);
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Unexpected error: {e.Message}");
        }
    }
    private static async Task UpdateHandler(ITelegramBotClient botClient, Update update, CancellationToken token)
    {
        try
        {
            if (update.Message is { } message)
            {
                if (message.Text is { } messageText)
                {
                    var chatId = message.Chat.Id;
                    if (messageText.StartsWith("/start", StringComparison.OrdinalIgnoreCase))
                    {
                        string filePath = "users.xlsx";
                        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                        if (!System.IO.File.Exists(filePath))
                        {
                            using (var package = new ExcelPackage())
                            {
                                var worksheet = package.Workbook.Worksheets.Add("Users");
                                worksheet.Cells[1, 1].Value = "ChatID";
                                worksheet.Cells[1, 2].Value = "Username";
                                worksheet.Cells[1, 3].Value = "Balance";
                                package.SaveAs(new FileInfo(filePath));
                            }
                        }

                        bool userExists = false;

                        using (var package = new ExcelPackage(new FileInfo(filePath)))
                        {
                            var worksheet = package.Workbook.Worksheets["Users"];
                            var rowCount = worksheet.Dimension?.Rows;

                            if (rowCount.HasValue)
                            {
                                for (int row = 2; row <= rowCount.Value; row++)
                                {
                                    if (worksheet.Cells[row, 1].Value.ToString() == chatId.ToString())
                                    {
                                        userExists = true;
                                        break;
                                    }
                                }
                            }

                            if (!userExists)
                            {
                                var newRow = rowCount.HasValue ? rowCount.Value + 1 : 2;
                                worksheet.Cells[newRow, 1].Value = chatId;
                                worksheet.Cells[newRow, 2].Value = message.From.Username;
                                worksheet.Cells[newRow, 3].Value = 0;
                                package.Save();
                            }
                        }

                        Console.WriteLine($"User with ChatID {chatId} and Username {message.From.Username} processed.");
                        await Start(botClient, chatId);
                        return;
                    }
                    else if (messageText.StartsWith("/status"))
                    {
                        var parts = messageText.Split(' ');
                        if (parts.Length < 2)
                        {
                            await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ.\n\n–ü—Ä–∏–º–µ—Ä: /status order_id");
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(parts[1]))
                            {
                                await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.");
                            }
                            else
                            {
                                try
                                {
                                    string orderId = parts[1];
                                    string statusResponseBody = await HttpClient.GetStringAsync($"https://soc-rocket.ru/api/v2/?action=status&orders={orderId}&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP");
                                    JObject statusResponse = JObject.Parse(statusResponseBody);

                                    if (statusResponse.ContainsKey(orderId))
                                    {
                                        
                                        var orderInfo = statusResponse[orderId];
                                        decimal rate = orderInfo["charge"].Value<decimal>();
                                        int price = (int)rate;
                                        string statusMessage =
                                                $"üìù  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ {orderId}:\n\n" +
                                                                   $"üî¥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} {orderInfo["currency"]}\n" +
                                                                   $"üîπ ID: {orderInfo["service"]}\n" +
                                                                   $"üåê –°—Å—ã–ª–∫–∞: {orderInfo["link"]}\n" +
                                                                   $"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {orderInfo["quantity"]}\n" +
                                                                   $"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {orderInfo["start_count"]}\n" +
                                                                   $"üìÖ –î–∞—Ç–∞: {orderInfo["date"]}\n" +
                                                                   $"‚úÖ –°—Ç–∞—Ç—É—Å: {orderInfo["status"]}\n" +
                                                                   $"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {orderInfo["remains"]}";

                                        var inlineKeyboard = new InlineKeyboardMarkup(new[]
                                        {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üîô –ì–ª–∞–≤–Ω–∞—è", "main")
                        }
                    });

                                        await botClient.SendTextMessageAsync(chatId, statusMessage, replyMarkup: inlineKeyboard);
                                    }
                                    else if (statusResponse.ContainsKey("error"))
                                    {
                                        string errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {orderId}: {statusResponse["error"]}";
                                        await botClient.SendTextMessageAsync(chatId, errorMessage);
                                    }
                                    else
                                    {
                                        await botClient.SendTextMessageAsync(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.");
                                    }
                                }
                                catch (HttpRequestException e)
                                {
                                    await botClient.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.Message}");
                                }
                            }
                        }
                    }
                    else if (messageText.StartsWith("/buy"))
                    {
                        var parts = messageText.Split(' ');
                        if (parts.Length < 4)
                        {
                            await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ.\n\n–ü—Ä–∏–º–µ—Ä: /buy 330 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–∫–∞");
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(parts[1]))
                            {
                                await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ id —É—Å–ª—É–≥–∏.");
                            }
                            if (string.IsNullOrEmpty(parts[2]))
                            {
                                await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
                            }
                            if (string.IsNullOrEmpty(parts[3]))
                            {
                                await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É.");
                            }
                            if (!string.IsNullOrEmpty(parts[1]) && !string.IsNullOrEmpty(parts[2]) && !string.IsNullOrEmpty(parts[3]))
                            {
                                try
                                {
                                    HttpResponseMessage response = await HttpClient.GetAsync("https://soc-rocket.ru/api/v2/?action=services&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP");
                                    response.EnsureSuccessStatusCode();

                                    string responseBody1 = await response.Content.ReadAsStringAsync();
                                    JArray jsonArray = JArray.Parse(responseBody1);
                                    var service = jsonArray.FirstOrDefault(s => s["service"]?.ToString() == parts[1]);

                                    if (service != null)
                                    {
                                        decimal rate = service["rate"].Value<decimal>();
                                        decimal price = rate * 2;
                                        Console.WriteLine($"Rate: {rate}, Price: {price}");

                                        string filePath = "users.xlsx";
                                        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                                        if (!System.IO.File.Exists(filePath))
                                        {
                                            Console.WriteLine("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                                            return;
                                        }

                                        using (var package = new ExcelPackage(new FileInfo(filePath)))
                                        {
                                            var worksheet = package.Workbook.Worksheets["Users"];
                                            var rowCount = worksheet.Dimension?.Rows;

                                            if (rowCount.HasValue)
                                            {
                                                bool userFound = false;

                                                for (int row = 2; row <= rowCount.Value; row++)
                                                {
                                                    if (worksheet.Cells[row, 1].Value.ToString() == chatId.ToString())
                                                    {
                                                        var balanceValue = worksheet.Cells[row, 3].Value;
                                                        if (balanceValue == null || !decimal.TryParse(balanceValue.ToString(), out decimal balance))
                                                        {
                                                            await botClient.SendTextMessageAsync(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                                                            return;
                                                        }
                                                        if (int.TryParse(parts[2], out int partsValue))
                                                        {
                                                            decimal amountToDeduct = (price / 1000m) * partsValue;
                                                            string formattedAmountToDeduct = amountToDeduct.ToString("0.0");
                                                            Console.WriteLine($"Balance: {balance}, Amount to Deduct: {amountToDeduct}");
                                                            if (balance >= amountToDeduct)
                                                            {
                                                                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                                                                string responseBody = await HttpClient.GetStringAsync($"https://soc-rocket.ru/api/v2/?action=add&service={parts[1]}&link={parts[3]}&quantity={parts[2]}&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP");
                                                                JObject jsonResponse = JObject.Parse(responseBody);
                                                                if (jsonResponse.ContainsKey("order"))
                                                                {
                                                                    var orderId = jsonResponse["order"].ToString();
                                                                    var inlineKeyboard = new InlineKeyboardMarkup(new[]
                                                                    {
                                            new[]
                                            {
                                                InlineKeyboardButton.WithCallbackData("üîô –ì–ª–∞–≤–Ω–∞—è","main")
                                            }
                                        });

                                                                    string statusResponseBody = await HttpClient.GetStringAsync($"https://soc-rocket.ru/api/v2/?action=status&orders={orderId}&key=bXmgSXp94cHDrOmaNbhNtGtlEoSmniiP");
                                                                    JObject statusResponse = JObject.Parse(statusResponseBody);

                                                                    if (statusResponse.ContainsKey(orderId))
                                                                    {
                                                                        var orderInfo = statusResponse[orderId];
                                                                        decimal charge = orderInfo["charge"].Value<decimal>();
                                                                        string statusMessage = $"üöÄ‚ú® –ó–∞–∫–∞–∑ ‚Ññ{orderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâü•≥" +
                                                                            $"\n" +
                                                                            $"üìù  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ {orderId}:\n\n" +
                                                                            $"üî¥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {charge * 2} {orderInfo["currency"]}\n" +
                                                                            $"üîπ ID: {orderInfo["service"]}\n" +
                                                                            $"üåê –°—Å—ã–ª–∫–∞: {orderInfo["link"]}\n" +
                                                                            $"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {orderInfo["quantity"]}\n" +
                                                                            $"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {orderInfo["start_count"]}\n" +
                                                                            $"üìÖ –î–∞—Ç–∞: {orderInfo["date"]}\n" +
                                                                            $"‚úÖ –°—Ç–∞—Ç—É—Å: {orderInfo["status"]}\n" +
                                                                            $"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {orderInfo["remains"]}\n\n üíö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: \n/status {orderId}";

                                                                        await botClient.SendTextMessageAsync(chatId, statusMessage, replyMarkup: inlineKeyboard);
                                                                        worksheet.Cells[row, 3].Value = balance - amountToDeduct;
                                                                        package.Save();
                                                                    }
                                                                    else if (statusResponse.ContainsKey("error"))
                                                                    {
                                                                        string errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {orderId}: {statusResponse["error"]}";
                                                                        await botClient.SendTextMessageAsync(chatId, errorMessage);
                                                                    }
                                                                }
                                                                else if (jsonResponse.ContainsKey("error"))
                                                                {
                                                                    await botClient.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞: {jsonResponse["error"]}");
                                                                }
                                                                else
                                                                {
                                                                    Console.WriteLine("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
                                                                }

                                                                userFound = true;
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                var inlineKeyboard = new InlineKeyboardMarkup(new[]
                                                                {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithUrl("–ù–∞–ø–∏—Å–∞—Ç—å","https://t.me/tekna_one")
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ì–ª–∞–≤–Ω–∞—è","main")
                                        }
                                    });
                                                                await botClient.SendTextMessageAsync(chatId, $"‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! ‚ùå" +
                                                                    "\r\n\n" +
                                                                    $"üíö–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n" +
                                                                    $"üíõ–¢—Ä–µ–±—É–µ—Ç—Å—è –∫ –æ–ø–ª–∞—Ç–µ: {formattedAmountToDeduct} ‚ÇΩ\n\n" +
                                                                    $"üí•–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!", replyMarkup: inlineKeyboard);
                                                            }
                                                        }
                                                    }
                                                }
                                                if (!userFound)
                                                {
                                                    await botClient.SendTextMessageAsync(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. üòî");
                                                }
                                            }
                                            else
                                            {
                                                Console.WriteLine("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
                                            }
                                        }
                                    }
                                }
                                catch (HttpRequestException e)
                                {
                                    Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e.Message}");
                                }
                            }
                        }
                    }
                    else if (messageText == "/balance")
                    {
                        await GetUserBalance(chatId, botClient, message.From.FirstName, message.From.Id);
                    }
                    else if (messageText.StartsWith("/del"))
                    {
                        var parts = messageText.Split(' ');
                        if (parts.Length < 2)
                        {
                            await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ id –∑–∞–∫–∞–∑–∞!");
                        }
                        else
                        {
                            await CancelOrder(botClient, parts[1], chatId);
                        }
                    }
                    else if (messageText.StartsWith("/pay"))
                    {
                        if (message.From.Id == 1416004677)
                        {
                            string filePath = "users.xlsx";
                            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                            if (!System.IO.File.Exists(filePath))
                            {
                                Console.WriteLine("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                                return;
                            }

                            var parts = messageText.Split(' ');
                            if (parts.Length < 3)
                            {
                                await botClient.SendTextMessageAsync(chatId, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ id –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!");
                                return;
                            }

                            string searchChatId = parts[1];
                            string newData = parts[2];

                            using (var package = new ExcelPackage(new FileInfo(filePath)))
                            {
                                var worksheet = package.Workbook.Worksheets["Users"];
                                var rowCount = worksheet.Dimension?.Rows;

                                if (rowCount.HasValue)
                                {
                                    bool userFound = false;

                                    for (int row = 2; row <= rowCount.Value; row++)
                                    {
                                        if (worksheet.Cells[row, 1].Value.ToString() == searchChatId)
                                        {
                                            // Assuming the column to update is column 3 (you can change this to the correct column index)
                                            worksheet.Cells[row, 3].Value = newData;
                                            package.Save();

                                            string message1 = $"ID: {searchChatId}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {newData}";
                                            await botClient.SendTextMessageAsync(chatId, message1);
                                            userFound = true;
                                            break;
                                        }
                                    }
                                    if (!userFound)
                                    {
                                        await botClient.SendTextMessageAsync(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                                    }
                                }
                                else
                                {
                                    Console.WriteLine("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
                                }
                            }
                        }
                    }
                    else if (messageText == "/help")
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithUrl("–ù–∞–ø–∏—Å–∞—Ç—å","https://t.me/tekna_one")
                            },
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("üîô –ì–ª–∞–≤–Ω–∞—è","main")
                            }
                        });
                        await botClient.SendTextMessageAsync(chatId, "‚öí–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ä–æ–±–ª–µ–º–æ–π? \nüéá –¢–æ–≥–¥–∞ –Ω–ø–∏—à–∏—Ç–µ –Ω–∞–º!üéá", replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        await Start(botClient, chatId);
                    }

                }
            }

            if (update.CallbackQuery is { } callbackQuery)
            {
                var chatId = callbackQuery.Message.Chat.Id;
                var callbackData = callbackQuery.Data;
                if (int.TryParse(callbackData, out int serviceId))
                {
                    await SendServiceDetailsAsync(serviceId, chatId, botClient);
                }
                else
                {
                    switch (callbackData)
                    {
                        case "telegram":
                            await SendFilteredCategoriesAsync(chatId,
                                $"üí¨ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: Telegram**\n\n" +
                                "‚ú® –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Telegram. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üëá\n\n" +
                                "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
                                callbackData, botClient);
                            break;

                        case "vk":
                            await SendFilteredCategoriesAsync(chatId,
                                $"üì± **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: VK**\n\n" +
                                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é VK! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è! üëá\n\n" +
                                "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
                                callbackData, botClient);
                            break;

                        case "youtube":
                            await SendFilteredCategoriesAsync(chatId,
                                $"üì∫ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: YouTube**\n\n" +
                                "üåü –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é YouTube –∏ –Ω–∞–π–¥–∏—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –ø–æ –¥—É—à–µ! üëá\n\n" +
                                "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
                                callbackData, botClient);
                            break;

                        case "instagram":
                            await SendFilteredCategoriesAsync(chatId,
                                $"üì∏ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: Instagram**\n\n" +
                                "üì∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Instagram! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è! üëá\n\n" +
                                "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
                                callbackData, botClient);
                            break;
                        case "main":
                            await Start(botClient, chatId);
                            break;
                        case "Instagram likes":
                            await SendFilteredItemsAsync("Instagram likes", chatId, botClient);
                            break;
                        case "Instagram views":
                            await SendFilteredItemsAsync("Instagram views", chatId, botClient);
                            break;
                        case "Instagram followers":
                            await SendFilteredItemsAsync("Instagram followers", chatId, botClient);
                            break;
                        case "Instagram auto":
                            await SendFilteredItemsAsync("Instagram auto", chatId, botClient);
                            break;
                        case "Instagram other":
                            await SendFilteredItemsAsync("Instagram other", chatId, botClient);
                            break;
                        case "Instagram comments":
                            await SendFilteredItemsAsync("Instagram comments", chatId, botClient);
                            break;
                        case "VK likes":
                            await SendFilteredItemsAsync("VK likes", chatId, botClient);
                            break;
                        case "VK friends":
                            await SendFilteredItemsAsync("VK friends", chatId, botClient);
                            break;
                        case "VK followers":
                            await SendFilteredItemsAsync("VK followers", chatId, botClient);
                            break;
                        case "VK views":
                            await SendFilteredItemsAsync("VK views", chatId, botClient);
                            break;
                        case "VK other":
                            await SendFilteredItemsAsync("VK other", chatId, botClient);
                            break;
                        case "Youtube views":
                            await SendFilteredItemsAsync("Youtube views", chatId, botClient);
                            break;
                        case "Youtube likes":
                            await SendFilteredItemsAsync("Youtube likes", chatId, botClient);
                            break;
                        case "Youtube livestream":
                            await SendFilteredItemsAsync("Youtube livestream", chatId, botClient);
                            break;
                        case "Youtube followers":
                            await SendFilteredItemsAsync("Youtube followers", chatId, botClient);
                            break;
                        case "Youtube other":
                            await SendFilteredItemsAsync("Youtube other", chatId, botClient);
                            break;
                        case "Telegram followers":
                            await SendFilteredItemsAsync("Telegram followers", chatId, botClient);
                            break;
                        case "Telegram views":
                            await SendFilteredItemsAsync("Telegram views", chatId, botClient);
                            break;
                        case "Telegram reaction":
                            await SendFilteredItemsAsync("Telegram reaction", chatId, botClient);
                            break;
                        case "Telegram statistic":
                            await SendFilteredItemsAsync("Telegram statistic", chatId, botClient);
                            break;
                        case "Telegram auto":
                            await SendFilteredItemsAsync("Telegram auto", chatId, botClient);
                            break;
                        case "Telegram premium":
                            await SendFilteredItemsAsync("Telegram premium", chatId, botClient);
                            break;
                        case "Telegram other":
                            await SendFilteredItemsAsync("Telegram other", chatId, botClient);
                            break;
                        case "tiktok":
                            await SendFilteredItemsAsync("tiktok", chatId, botClient);
                            break;
                        case "rutube":
                            await SendFilteredItemsAsync("rutube", chatId, botClient);
                            break;
                        case "dzen":
                            await SendFilteredItemsAsync("dzen", chatId, botClient);
                            break;
                        case "shedevrum":
                            await SendFilteredItemsAsync("shedevrum", chatId, botClient);
                            break;
                        case "music":
                            await SendFilteredItemsAsync("music", chatId, botClient);
                            break;
                        default:
                            await botClient.SendTextMessageAsync(chatId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
                            break;
                    }
                }
            }
        }
        catch (ApiRequestException ex) when (ex.ErrorCode == 403)
        {
            Console.WriteLine("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: Forbidden: bot was blocked by the user");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex.Message}");
        }
    }
}
